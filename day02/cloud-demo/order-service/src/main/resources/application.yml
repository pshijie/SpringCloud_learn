server:
  port: 8083
spring:
  datasource:
#    url: jdbc:mysql://localhost:3306/cloud_order?useSSL=false&serverTimezone=UTC
    url: jdbc:mysql://mysql:3306/cloud_order?useSSL=false&serverTimezone=UTC  # 在Docker中部署
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.cj.jdbc.Driver
  application:
    name: orderservice
  cloud:
    nacos: # 配置nacos
      #      server-addr: localhost:8848 # nacos地址(未配置集群和Nginx前)
#      server-addr: localhost:80 # nacos地址(即在Nginx中配置的代理地址)
      server-addr: nacos:80 # nacos地址(在Docker中进行部署)
      discovery:
        cluster-name: KM  # 集群名称(即让自己属于KM集群)
#        namespace: xxxx  # 命名空间ID
#        ephemeral: false  # 设置为非临时实例

mybatis:
  type-aliases-package: cn.itcast.user.pojo
  configuration:
    map-underscore-to-camel-case: true
logging:
  level:
    cn.itcast: debug
  pattern:
    dateformat: MM-dd HH:mm:ss:SSS

#eureka:
#  client:
#    service-url:
#      defaultZone: http://127.0.0.1:10086/eureka/  # eureka本身也是一个服务，所以会将自己注册上去

userservice: # 指定服务名称，这样在调用该服务时才会使用到配置的规则
  ribbon:
    #    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 负载均衡规则
    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule

ribbon:
  eager-load:
    enabled: true # 开启饥饿加载
    clients: userservice # 指定对userservice服务进行饥饿加载

feign:
  client:
    config:
#      userservice: # 写服务名称就是针对某个微服务的局部配置
      default: # 写"default"就是全局配置
        loggerLevel: BASIC  # 日志级别，BASIC即基本的请求和响应信息
  httpclient:
    enabled: true  # 开启feign对HttpClient的支持
    max-connections: 200  # 最大连接数
    max-connections-per-route: 50  # 每个路径的最大连接数
